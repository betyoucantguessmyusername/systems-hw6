(Joe Meyer hw6)Because my networked cache doesn't work and the ostensibly working networked cache provided to me by other students does not seem to work when I run their tests, I benchmarked my non-networked cache instead (because that at least works).Also, for my script I standardized it to .01 microseconds instead of 1 millisecond because my non-networked cache is so much faster than a networked cache that waiting for 1 milliseconds-worth of operations is too many operations to wait.Major bottlenecks in my code included getting an element size, which relied on iterating through the eviction vector to find the element, and inserting/deleting from eviction queue, which iterated through the vector eviction_queue to ensure each item is in the queue only once on insert, and not in the queue on deletion (yes, these checks are redundant). Certain safeguards also wasted resources, verifying facts despite only ever being called when those facts hold  (i.e. checking that arguments to functions are valid when that function is only ever called with valid arguments, as with the eviction function).To remedy these inefficiencies, I changed the getsize function to maintain a hashtable mapping from keys to value sizes, so it no longer iterates over the entire eviction-queue. I also deleted the code which checks that each item is in the eviction queue exactly once on insert and not at all on deletion, and instead check that next_evict is in the hashtable on eviction, looping the evictor until next_evict is in the hashtable (this new code is in "set"). I also changed the evictor from largest-first to LRU, sparing the resources used to sort the eviction queue on insert. Finally, I deleted redundant safeguards.My changes left most operation times relatively unchanged in my benchmark (perhaps because my tests all use tiny caches to make filling them easier so asymptotic improvements might be obscured by the tiny workloads). Non-overwriting sets seem to be slightly slower in my revised cache (i.e. 1.1e-6 instead of 1.0e-6), and overwriting sets seem to be slightly faster (i.e. 1.4e-6 instead of 1.6e-6). Getting absent elements seems slightly faster in my revised cache, and getting deleted elements and deleting elements is significantly faster (1.2e-6 vs 1.6e-6 nanosecs for both, also deleting absent in my revised cache is 6.0e-7 instead of 6.4e-7 nanosecs).Overall, I improved performance slightly for overwrites, deletes, and getting absent elements at the expense of a slight delay in non-overwriting sets. Other operation times were not affected by my changes. The improvements likely stem primarily from the reduced runtimes of getting a cached element's size and lazy eviction queue maintenance. The extra set delay could be due to the extra cost of maintaining a hashtable of each element's size and updating it each set.My throughput improved slightly, from 8 operations in .01 microsecs to 9 operations. This is because the workload is mostly gets, and my revised cache takes the same amount of time to get a present element, and less time to get an absent element. ex benchmark output:vagrant@ubuntu:/vagrant/hw6$ g++ benchmark.cc efficient_cache.ccvagrant@ubuntu:/vagrant/hw6$ ./a.outRunning test_set_insert() 		avg nanosecs per op: 1.15239e-06		PASSRunning test_set_insert_full() 		avg nanosecs per op: 1.2631e-06	PASSRunning test_set_overwrite() 		avg nanosecs per op: 1.38623e-06	PASSRunning test_set_overwrite_dif_size() avg nanosecs per op: 1.35435e-06	PASSRunning test_get_present() 		avg nanosecs per op: 6.4122e-07		PASSRunning test_get_absent() 		avg nanosecs per op: 6.3152e-07		PASSRunning test_get_deleted() 		avg nanosecs per op: 1.25503e-06		PASSRunning test_delete() 		avg nanosecs per op: 1.19022e-06		PASSRunning test_delete_absent() 		avg nanosecs per op: 6.0364e-07	PASSRunning test_space_used_empty() 	avg nanosecs per op: 4.6246e-07		PASSRunning test_space_used_full() 		avg nanosecs per op: 4.6243e-07	PASSRunning useless mandatory script 		operations in .01 microsecs: 9vagrant@ubuntu:/vagrant/hw6$ g++ benchmark.cc cache.ccvagrant@ubuntu:/vagrant/hw6$ ./a.outRunning test_set_insert() 		avg nanosecs per op: 1.00606e-06		PASSRunning test_set_insert_full() 		avg nanosecs per op: 1.11471e-06	PASSRunning test_set_overwrite() 		avg nanosecs per op: 1.59392e-06	PASSRunning test_set_overwrite_dif_size() avg nanosecs per op: 1.62697e-06  PASSRunning test_get_present() 		avg nanosecs per op: 6.412e-07		PASSRunning test_get_absent() 		avg nanosecs per op: 6.2368e-07		PASSRunning test_get_deleted() 		avg nanosecs per op: 1.6251e-06		PASSRunning test_delete() 		avg nanosecs per op: 1.55093e-06		PASSRunning test_delete_absent() 		avg nanosecs per op: 6.3858e-07	PASSRunning test_space_used_empty() 	avg nanosecs per op: 4.7639e-07		PASSRunning test_space_used_full() 		avg nanosecs per op: 4.5437e-07	PASSRunning useless mandatory script 		operations in .01 microsecs: 8